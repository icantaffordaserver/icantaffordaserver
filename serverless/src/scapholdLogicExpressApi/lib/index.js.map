{"version":3,"file":"index.js","sources":["webpack:///webpack/bootstrap 7b3771d5f669cc49db42","webpack:///external \"express\"","webpack:///src/graphql/graphqlFetch.js","webpack:///external \"mailer\"","webpack:///src/helpers/generateUniqueToken.js","webpack:///external \"validator\"","webpack:///src/graphql/lokkaClient.js","webpack:///src/graphql/mutations/deleteVerifyEmailMutation.js","webpack:///src/graphql/queries/getInviteByIdQuery.js","webpack:///src/graphql/queries/getUserByEmailQuery.js","webpack:///src/helpers/generateEmailVerificationUrl.js","webpack:///src/helpers/generateInviteEmailUrl.js","webpack:///../../config/webpackInclude.js","webpack:///src/index.js","webpack:///src/app.js","webpack:///src/graphql/mutations/setInviteToAcceptedMutation.js","webpack:///src/helpers/isInviteEmailAndTokenValid.js","webpack:///src/helpers/setInviteToAccepted.js","webpack:///src/logic/addToUsersConnectionsConnection/async/addUserToConnection.js","webpack:///src/logic/addToUsersConnectionsConnection/index.js","webpack:///src/logic/createInvites/async/sendInviteEmail.js","webpack:///src/logic/createInvites/index.js","webpack:///src/logic/createInvites/pre/validateInviteAndCreateInviteToken.js","webpack:///src/logic/createPasswordReset/async/sendPasswordResetEmail.js","webpack:///src/logic/createPasswordReset/index.js","webpack:///src/logic/createPasswordReset/pre/createPasswordReset.js","webpack:///src/logic/createUser/async/sendVerificationEmailAfterCreateUser.js","webpack:///src/logic/createUser/index.js","webpack:///src/logic/createUser/post/isInviteApproved.js","webpack:///src/logic/createUser/pre/validateInputAndCreateEmailVerifyToken.js","webpack:///src/logic/createVerifyEmail/async/sendVerificationEmailAfterCreateVerifyEmail.js","webpack:///src/logic/createVerifyEmail/index.js","webpack:///src/logic/createVerifyEmail/pre/generateToken.js","webpack:///src/logic/updateInvites/index.js","webpack:///src/logic/updateInvites/pre/isResendingInvite.js","webpack:///src/logic/updatePasswordReset/index.js","webpack:///src/logic/updatePasswordReset/pre/updatePasswordReset.js","webpack:///src/logic/updateUser/index.js","webpack:///src/logic/updateUser/pre/verifyEmail.js","webpack:///src/routes.js","webpack:///external \"assert\"","webpack:///external \"aws-serverless-express\"","webpack:///external \"babel-polyfill\"","webpack:///external \"body-parser\"","webpack:///external \"crypto\"","webpack:///external \"isomorphic-fetch\"","webpack:///external \"lokka\"","webpack:///external \"lokka-transport-http\"","webpack:///external \"moment\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 48);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 7b3771d5f669cc49db42","module.exports = require(\"express\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express\"\n// module id = 0\n// module chunks = 0","/**\n * Created by alexandermann on 2017-04-03.\n */\nimport 'isomorphic-fetch';\nimport assert from 'assert';\n\nconst ADMIN_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJraW5kIjoic2NhcGhvbGQuc3VwZXJ1c2VyIiwiZXhwIjo4NjQwMDAwMDAwMDAwMDAwLCJpYXQiOjE0OTE4NDI3NTMsImF1ZCI6Ikp0Z2Z5WklRMnBKajlySThFOWU2MTdoUWNrMFJueEFuIiwiaXNzIjoiaHR0cHM6Ly9zY2FwaG9sZC5hdXRoMC5jb20vIiwic3ViIjoiMjdlZmU5MDAtMzNkOS00ZjQ3LThlMmQtZGJlZGY4NTA0ZjZmIn0.d3u0P0qTyd4LhSnETR3guDGLKPMhV7cpjTmGHe_hCyI';\nconst SCAPHOLD_URL = 'https://us-west-2.api.scaphold.io/graphql/toktumi';\n\n/**\n * create a graphql-fetch bound to a specific graphql url\n * @param  {String} graphqlUrl\n * @return {Function} graphqlFetch\n */\nfunction graphqlFetch(graphqlUrl) {\n  /**\n   * graphql fetch - fetch w/ smart defaults for graphql requests\n   * @param  {Query} query graphql query\n   * @param  {Object} vars  graphql query args\n   * @param  {Object} opts  fetch options\n   * @return {FetchPromise} fetch promise\n   */\n  return async (query, vars, opts) => {\n    assert(query, 'query is required');\n    vars = vars || {};\n    opts = opts || {};\n    opts.method = 'POST';\n    opts.headers = {\n      Authorization: `Bearer ${ADMIN_TOKEN}`,\n      'content-type': 'application/json',\n    };\n    opts.body = JSON.stringify({\n      query,\n      variables: vars,\n    });\n\n    let res = await fetch(graphqlUrl, opts);\n    res = await res.json();\n    if (res.errors) throw new Error(res);\n    return res;\n  };\n}\n\nexport default graphqlFetch(SCAPHOLD_URL);\n\n\n\n// WEBPACK FOOTER //\n// src/graphql/graphqlFetch.js","module.exports = require(\"mailer\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"mailer\"\n// module id = 2\n// module chunks = 0","/**\n * Created by alexandermann on 2017-04-21.\n */\nimport crypto from 'crypto';\n\n/**\n * Generate a unique token\n * @returns {Promise.<void>}\n */\nexport function generateUniqueToken() {\n  return new Promise((resolve, reject) => {\n    crypto.randomBytes(48, (err, buf) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(buf.toString('hex'));\n      }\n    });\n  });\n}\n\n\n\n// WEBPACK FOOTER //\n// src/helpers/generateUniqueToken.js","module.exports = require(\"validator\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"validator\"\n// module id = 4\n// module chunks = 0","/**\n * Created by alexandermann on 2017-03-05.\n */\nimport Lokka from 'lokka';\nimport Transport from 'lokka-transport-http';\n\n// outdated\nconst ADMIN_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJraW5kIjoic2NhcGhvbGQuc3VwZXJ1c2VyIiwiZXhwIjo4NjQwMDAwMDAwMDAwMDAwLCJpYXQiOjE0ODg1NzgzNDYsImF1ZCI6Ikp0Z2Z5WklRMnBKajlySThFOWU2MTdoUWNrMFJueEFuIiwiaXNzIjoiaHR0cHM6Ly9zY2FwaG9sZC5hdXRoMC5jb20vIiwic3ViIjoiMjdlZmU5MDAtMzNkOS00ZjQ3LThlMmQtZGJlZGY4NTA0ZjZmIn0.Rt8sUyF4vF8_Ya21fbzDC22RU8NJ5cLrWjI6KAtaPbg';\n\n// outdated\nexport default new Lokka({\n  transport: new Transport('https://us-west-2.api.scaphold.io/graphql/shift-beta', {\n    headers: { Authorization: `Bearer ${ADMIN_TOKEN}` },\n  }),\n});\n\n\n\n\n// WEBPACK FOOTER //\n// src/graphql/lokkaClient.js","/**\n * Created by alexandermann on 2017-04-03.\n */\n\nexport default `\n  mutation deleteVerifyEmail($id: ID!) {\n    deleteVerifyEmail(input: {id: $id}) {\n      clientMutationId\n    }\n  }\n`;\n\n\n\n// WEBPACK FOOTER //\n// src/graphql/mutations/deleteVerifyEmailMutation.js","/**\n * Created by alexandermann on 2017-04-11.\n */\nexport default `\n  query getInvite($inviteId: ID!) {\n    getInvites(id: $inviteId) {\n      firstName\n      lastName\n      email\n      token\n      isAccepted\n    }\n  }\n`;\n\n\n\n// WEBPACK FOOTER //\n// src/graphql/queries/getInviteByIdQuery.js","/**\n * Created by alexandermann on 2017-04-03.\n */\n\nexport default `\n  query getUser($email: String){\n    viewer {\n      allUsers(where: {username: {eq: $email}}) {\n        edges {\n          node {\n            id\n            firstName\n            username\n            emailVerified\n            verifyEmail {\n              id\n              emailToVerify\n              token\n              tokenExpiry\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n\n\n// WEBPACK FOOTER //\n// src/graphql/queries/getUserByEmailQuery.js","/**\n * Created by alexandermann on 2017-04-21.\n */\nexport function generateEmailVerificationUrl(token) {\n  return `https://shiftwithus.ngrok.io/verify/${token}`;\n}\n\n\n\n// WEBPACK FOOTER //\n// src/helpers/generateEmailVerificationUrl.js","/**\n * Created by alexandermann on 2017-04-21.\n */\nexport function generateInviteEmailUrl(inviteId, token) {\n  return `https://beta.toktumi.io/signup/${inviteId}/${token}`\n}\n\n\n\n// WEBPACK FOOTER //\n// src/helpers/generateInviteEmailUrl.js","/**\n * Created by alexandermann on 2017-05-04.\n */\n// Catch all unhandled exceptions and print their stack trace.\n// Required if the hanlder function is async, as promises\n// can swallow error messages.\n\nprocess.on('uncaughtException', err => console.error('uncaught exception:', err))\nprocess.on('unhandledRejection', error => console.error('unhandled rejection:', error))\n\n\n\n// WEBPACK FOOTER //\n// ../../config/webpackInclude.js","// Vanilla Lambda function.\nimport awsServerlessExpress from 'aws-serverless-express'\n\nimport app from './app';\n\nconst server = awsServerlessExpress.createServer(app)\n\nexport default (event, context) => awsServerlessExpress.proxy(server, event, context)\n\n\n\n// WEBPACK FOOTER //\n// src/index.js","/**\n * Created by alexandermann on 2017-04-22.\n */\n// note that if this were a library/tool we should use transform runtime so that we don't pollute\n// the global object/scope\nimport 'babel-polyfill'\nimport express from 'express'\nimport bodyParser from 'body-parser';\nimport routes from './routes'\n\nconst app = express()\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\n\n// set base url to 'scaphold' here as this is the base route we use in the serverless.yml config\napp.use('/scaphold', routes)\n\n// development error handler\n// will print stacktrace\nif (app.get('env') === 'development' || app.get('env') === 'dev') {\n  app.use((err, req, res, next) => {\n    res.status(err.status || 500)\n    res.send({\n      message: err.message,\n      error: err,\n    })\n  })\n}\n\n// production error handler\n// no stacktraces leaked to user\napp.use((err, req, res, next) => {\n  res.status(err.status || 500)\n  res.send({\n    message: err.message,\n    error: {},\n  })\n})\n\nexport default app\n\n\n\n// WEBPACK FOOTER //\n// src/app.js","/**\n * Created by alexandermann on 2017-04-12.\n */\n\nexport default `\n  mutation setInviteToAccepted($inviteId: ID!) {\n    updateInvites(input: {id: $inviteId, status: accepted, isAccepted: true}) {\n      clientMutationId\n    }\n  }\n`;\n\n\n\n// WEBPACK FOOTER //\n// src/graphql/mutations/setInviteToAcceptedMutation.js","/**\n * Created by alexandermann on 2017-04-11.\n */\nimport graphqlFetch from '../graphql/graphqlFetch';\nimport getInviteById from '../graphql/queries/getInviteByIdQuery';\n\nexport default async (inviteId, email, token) => {\n  let response;\n  try {\n    response = await graphqlFetch(getInviteById, { inviteId });\n    const { email: storedEmail, token: storedToken, isAccepted } = response.data.getInvites;\n    if (email === storedEmail && token === storedToken && !isAccepted) {\n      return true;\n    }\n    return false; // in all other cases return false\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// src/helpers/isInviteEmailAndTokenValid.js","/**\n * Created by alexandermann on 2017-04-12.\n */\nimport graphqlFetch from '../graphql/graphqlFetch';\nimport setInviteToAcceptedMutation from '../graphql/mutations/setInviteToAcceptedMutation';\n\nexport default async inviteId => graphqlFetch(setInviteToAcceptedMutation, { inviteId });\n\n\n\n// WEBPACK FOOTER //\n// src/helpers/setInviteToAccepted.js","/**\n * Created by alexandermann on 2017-04-18.\n */\nimport moment from 'moment'\nimport { sendConversationScheduledEmail } from 'mailer'\n\nexport default async (req, res) => {\n  const { user: { email }, connections: { connectionTime } } = req.body\n\n  // convert the ISO8601 string a human readable date, ex - \"Sunday, February 14th @ 3:25 pm\"\n  const conversationTime = moment(connectionTime).format('dddd, MMMM Do @ h:mm a')\n  sendConversationScheduledEmail(email, conversationTime)\n\n  res.sendStatus(200)\n}\n\n\n\n// WEBPACK FOOTER //\n// src/logic/addToUsersConnectionsConnection/async/addUserToConnection.js","/**\n * Created by alexandermann on 2017-04-22.\n */\nimport { Router } from 'express';\n\nimport addUserToConnection from './async/addUserToConnection';\n\nconst routes = Router()\n\nroutes.post('/async/addUserToConnection', addUserToConnection)\n\nexport default routes\n\n\n\n// WEBPACK FOOTER //\n// src/logic/addToUsersConnectionsConnection/index.js","/**\n * Created by alexandermann on 2017-04-05.\n */\nimport { sendInviteEmail, sendInviteAcceptedEmail } from 'mailer'\nimport { generateInviteEmailUrl } from '../../../helpers/generateInviteEmailUrl'\n\nexport default async (req, res) => {\n  const { id: inviteId, firstName, email, token, inviteRequest } = req.body.payload.changedInvites\n\n  const actionUrl = generateInviteEmailUrl(inviteId, token)\n\n  if (inviteRequest) {\n    await sendInviteAcceptedEmail({\n      firstName,\n      recipientEmail: email,\n      actionUrl,\n    })\n  } else {\n    await sendInviteEmail({\n      firstName,\n      recipientEmail: email,\n      actionUrl,\n    })\n  }\n\n  res.status(200).send('Message sent successfully')\n}\n\n\n\n// WEBPACK FOOTER //\n// src/logic/createInvites/async/sendInviteEmail.js","/**\n * Created by alexandermann on 2017-04-22.\n */\nimport { Router } from 'express'\n\nimport validateInviteAndCreateInviteToken from './pre/validateInviteAndCreateInviteToken'\nimport sendInviteEmail from './async/sendInviteEmail'\n\nconst routes = Router()\n\nroutes.post('/pre/validateInviteAndCreateInviteToken', validateInviteAndCreateInviteToken)\nroutes.post('/async/sendInviteEmail', sendInviteEmail)\n\nexport default routes\n\n\n\n// WEBPACK FOOTER //\n// src/logic/createInvites/index.js","/**\n * Created by alexandermann on 2017-04-04.\n */\nimport { isEmail, normalizeEmail } from 'validator'\nimport graphqlFetch from '../../../graphql/graphqlFetch'\nimport { generateUniqueToken } from '../../../helpers/generateUniqueToken'\nimport getUserByEmailQuery from '../../../graphql/queries/getUserByEmailQuery'\n\nexport default async (req, res, next) => {\n  const { email } = req.body.input\n  // check if email is valid format\n  if (!isEmail(email)) {\n    return next(new Error('Please enter a valid email'))\n  }\n\n  // check if inviteRequestsId is present to determine what email to send\n\n\n  // Normalize email\n  const normalizedEmail = normalizeEmail(email)\n\n  // query the submitted email\n  const query = await graphqlFetch(getUserByEmailQuery, { email: normalizedEmail })\n\n  const emailExists = query.data.viewer.allUsers.edges.length !== 0\n  if (emailExists) {\n    return next(new Error('User already exists for this email'))\n  }\n\n  // generate a unique token set to expire in 1 day, UTC\n  const token = await generateUniqueToken()\n\n  // send the data along the \"logic\" flow in the expected format to update the store\n  const responseBody = {\n    input: {\n      ...req.body.input,\n      email,\n      token,\n    },\n  }\n  res.send(responseBody)\n}\n\n\n\n// WEBPACK FOOTER //\n// src/logic/createInvites/pre/validateInviteAndCreateInviteToken.js","/**\n * Created by alexandermann on 2017-03-27.\n */\nimport { sendPasswordResetEmail } from 'mailer'\nimport client from '../../../graphql/lokkaClient'\n\nconst getPasswordResetQuery = `\n  query getPwId($passwordResetId: ID!) {\n    getPasswordReset(id: $passwordResetId) {\n      email\n      resetToken\n      resetExpires\n      securityInfo\n      user {\n        firstName\n      }\n    }\n  }\n`\n\nexport default async (req, res) => {\n  try {\n    const { id } = req.body.payload.changedPasswordReset\n    // have to fetch the data from scaphold because permissions don't pass this to async\n    // function, probably a better way to structure the permissions but will optimize later, TODO\n    const passwordResetResponse = await client.query(getPasswordResetQuery, {\n      passwordResetId: id,\n    })\n    const {\n      email,\n      user: { firstName },\n      securityInfo,\n      resetToken,\n    } = passwordResetResponse.getPasswordReset\n    const actionUrl = `localhost:3000/reset/${id}/${resetToken}`\n    await sendPasswordResetEmail({\n      firstName,\n      recipientEmail: email,\n      actionUrl,\n      operatingSystem: securityInfo.os,\n      browserName: securityInfo.browser,\n    })\n    // send the data along the \"logic\" flow in the expected format to update the store\n    res.sendStatus(200)\n  } catch (err) {\n    console.log(err)\n    return res.status(400).send(err)\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// src/logic/createPasswordReset/async/sendPasswordResetEmail.js","/**\n * Created by alexandermann on 2017-04-22.\n */\nimport { Router } from 'express'\n\nimport createPasswordReset from './pre/createPasswordReset'\nimport sendPasswordResetEmail from './async/sendPasswordResetEmail'\n\nconst routes = Router()\n\nroutes.post('/pre/createPasswordReset', createPasswordReset)\nroutes.post('/async/sendPasswordResetEmail', sendPasswordResetEmail)\n\nexport default routes\n\n\n\n// WEBPACK FOOTER //\n// src/logic/createPasswordReset/index.js","/**\n * Created by alexandermann on 2017-03-03.\n */\nimport { isEmail, normalizeEmail } from 'validator';\nimport client from '../../../graphql/lokkaClient';\nimport { generateUniqueToken } from '../../../helpers/generateUniqueToken';\n\n\nconst getUserIdQuery = `\nquery getUser($email: String){\n    viewer {\n      allUsers(where: {username: {eq: $email}}) {\n        edges {\n          node {\n            id\n            email\n            passwordReset {\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n// note that lokka uses a different syntax for mutations than apollo, doesn't include\n// \"mutation someNameForMutation\" part\nconst deleteExistingPasswordResetMutation = `\n($id: ID!) {\n  deletePasswordReset(input: {id: $id}) {\n    clientMutationId\n  }\n}`;\n\nexport default async function passwordReset(req, res) {\n  try {\n    let { email: inputEmail, securityInfo } = req.body.input;\n\n    // check if email is valid format\n    if (!isEmail(inputEmail)) return res.status(400).send('Please enter a valid email.');\n\n    // Save the email sent from forgot password page and normalize it\n    inputEmail = normalizeEmail(inputEmail);\n\n    // Query graphql server with email submitted to get userId\n    const response = await client.query(getUserIdQuery, { email: inputEmail });\n\n    // check if user exists in db\n    if (response.viewer.allUsers.edges.length === 0) {\n      return res.status(400).send('The email entered does not exist.');\n    }\n\n    // pull relevant fields, generate the reset token and expiry\n    const { id: userId, email } = response.viewer.allUsers.edges[0].node;\n    const resetToken = await generateUniqueToken();\n    const resetExpires = Date.now() + 86400000; // 24hrs before expiry\n\n    // check if password reset token exists already for requested user, if it does delete it\n    if (response.viewer.allUsers.edges[0].node && response.viewer.allUsers.edges[0].node.passwordReset) {\n      // pull the existing password reset id\n      const { id: id2Delete } = response.viewer.allUsers.edges[0].node.passwordReset;\n      await client.mutate(deleteExistingPasswordResetMutation, { id: id2Delete });\n    }\n\n    // send the data along the \"logic\" flow in the expected format to update the store\n    return res.send({\n      input: {\n        email,\n        userId,\n        resetToken,\n        resetExpires,\n        securityInfo,\n      },\n    });\n  } catch (err) {\n    console.log(err);\n    return res.status(400).send(err);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// src/logic/createPasswordReset/pre/createPasswordReset.js","/**\n * Created by alexandermann on 2017-03-26.\n */\nimport { sendVerificationEmail } from 'mailer'\nimport { generateEmailVerificationUrl } from '../../../helpers/generateEmailVerificationUrl'\n\nexport default async (req, res) => {\n  // in the case of the beta, we do not need to send a verification email to verify the user since\n  // we have already sent them an invite, therefore do not send the verification email\n  if (req.body.payload.changedUser.emailVerified) return res.sendStatus(200)\n\n  try {\n    const { firstName, verifyEmail: { emailToVerify, token } } = req.body.payload.changedUser\n\n    const actionUrl = generateEmailVerificationUrl(token)\n\n    await sendVerificationEmail({\n      firstName,\n      recipientEmail: emailToVerify,\n      emailVerifiedToken: token,\n      actionUrl,\n    })\n    return res.sendStatus(200)\n  } catch (err) {\n    console.log(err)\n    return res.status(400).send(err)\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// src/logic/createUser/async/sendVerificationEmailAfterCreateUser.js","/**\n * Created by alexandermann on 2017-04-22.\n */\nimport { Router } from 'express'\n\nimport validateInputAndCreateEmailVerifyToken from './pre/validateInputAndCreateEmailVerifyToken'\nimport isInviteApproved from './post/isInviteApproved'\nimport sendVerificationEmailAfterCreateUser from './async/sendVerificationEmailAfterCreateUser'\n\nconst routes = Router()\n\nroutes.post('/pre/validateInputAndCreateEmailVerifyToken', validateInputAndCreateEmailVerifyToken)\nroutes.post('/post/isInviteApproved', isInviteApproved)\nroutes.post('/async/sendVerificationEmailAfterCreateUser', sendVerificationEmailAfterCreateUser)\n\nexport default routes\n\n\n\n// WEBPACK FOOTER //\n// src/logic/createUser/index.js","/**\n * Created by alexandermann on 2017-04-12.\n */\nimport setInviteToAccepted from '../../../helpers/setInviteToAccepted';\n\nexport default async (req, res) => {\n  if (!req.body.changedUser.invite) {\n    return res.sendStatus(200);\n  }\n  const { id, isAccepted, status, email } = req.body.changedUser.invite;\n  try {\n    await setInviteToAccepted(id);\n    return res.sendStatus(200);\n  } catch (error) {\n    console.log(error);\n    return res.sendStatus(400);\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// src/logic/createUser/post/isInviteApproved.js","/**\n * Created by alexandermann on 2017-03-26.\n */\n\nimport { isEmail, normalizeEmail } from 'validator';\nimport { generateUniqueToken } from '../../../helpers/generateUniqueToken';\nimport isInviteEmailAndTokenValid from '../../../helpers/isInviteEmailAndTokenValid';\n\nexport default async (req, res) => {\n  try {\n    // pull input data off the request\n    const { email, requestVars: { inviteId, token: inviteToken } } = req.body.input;\n    // we have odd behaviour here - for some reason the inviteId appears as a number from\n    // req.body.input and not the string we are expecting, therefore we pass the id through the\n    // requestVars object make sure the request has a token and invite id\n    if (!inviteId || !inviteToken) {\n      return res.status(400).send('Sorry you need a valid invite to sign up at this time.');\n    }\n\n    // check if the email and token match the one in the db\n    const validInvite = await isInviteEmailAndTokenValid(inviteId, email, inviteToken);\n    if (!validInvite) {\n      return res\n        .status(400)\n        .send(new Error('Sorry you need a valid invite to sign up at this time.'));\n    }\n\n    // check if email is valid format\n    if (!isEmail(email)) return res.status(400).send('Please enter a valid email.');\n\n    // Normalize email\n    const normalizedEmail = normalizeEmail(email);\n\n    // normally we would check to see if the email is taken, but scaphold will do this for us via\n    // the \"unique\" constraint in the control panel\n\n    //  ************************** DISABLED FOR BETA ****************************\n    // generate a unique token set to expire in 1 day, UTC\n    // const token = await generateUniqueToken();\n    // const tokenExpiry = Date.now() + 86400000;\n\n    // send the data along the \"logic\" flow in the expected format to update the store\n    return res.send({\n      input: {\n        ...req.body.input, // destructure the current input, then overwrite anything we want to modify\n        username: normalizedEmail, // this is the \"unique id\" part for the user, always include it\n        email: normalizedEmail,\n        emailVerified: true,\n        inviteId,\n        // verifyEmail: {\n        //   emailToVerify: normalizedEmail,\n        //   token,\n        //   tokenExpiry,\n        // },\n        requestVars: null, // because this is the last function in the chain, clear request vars, TODO: put this in seperate function to clear all requestVars for all types that include them\n      },\n    });\n  } catch (err) {\n    console.log(err);\n    return res.status(400).send(err);\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// src/logic/createUser/pre/validateInputAndCreateEmailVerifyToken.js","/**\n * Created by alexandermann on 2017-04-02.\n */\n/**\n * Created by alexandermann on 2017-03-26.\n */\nimport { sendVerificationEmail } from 'mailer'\nimport { generateEmailVerificationUrl } from '../../../helpers/generateEmailVerificationUrl'\n\nexport default (async function(req, res) {\n  try {\n    const { emailToVerify, token, user: { firstName } } = req.body.payload.changedVerifyEmail\n    const actionUrl = generateEmailVerificationUrl(token)\n    await sendVerificationEmail({\n      firstName,\n      recipientEmail: emailToVerify,\n      emailVerifiedToken: token,\n      actionUrl,\n    })\n    return res.sendStatus(200)\n  } catch (err) {\n    console.log(err)\n    return res.status(400).send(err)\n  }\n})\n\n\n\n// WEBPACK FOOTER //\n// src/logic/createVerifyEmail/async/sendVerificationEmailAfterCreateVerifyEmail.js","/**\n * Created by alexandermann on 2017-04-22.\n */\nimport { Router } from 'express'\n\nimport generateToken from './pre/generateToken'\nimport sendVerificationEmailAfterCreateVerifyEmail\n  from './async/sendVerificationEmailAfterCreateVerifyEmail'\n\nconst routes = Router()\n\nroutes.post('/pre/generateToken', generateToken)\nroutes.post(\n  '/async/sendVerificationEmailAfterCreateVerifyEmail',\n  sendVerificationEmailAfterCreateVerifyEmail,\n)\n\nexport default routes\n\n\n\n// WEBPACK FOOTER //\n// src/logic/createVerifyEmail/index.js","/**\n * Created by alexandermann on 2017-04-02.\n */\n/**\n * Created by alexandermann on 2017-03-26.\n */\n\n// import isEmail from 'validator/lib/isEmail';\nimport { isEmail, normalizeEmail } from 'validator'\nimport graphqlFetch from '../../../graphql/graphqlFetch'\nimport getUserByEmailQuery from '../../../graphql/queries/getUserByEmailQuery'\nimport deleteVerifyEmailMutation from '../../../graphql/mutations/deleteVerifyEmailMutation'\nimport { generateUniqueToken } from '../../../helpers/generateUniqueToken'\n\nexport default async (req, res) => {\n  try {\n    // pull off relevant data from the incoming request\n    const { emailToVerify, userId } = req.body.input\n\n    // check if email is valid format\n    if (!isEmail(emailToVerify)) return res.status(400).send('Please enter a valid email.')\n\n    // Normalize email\n    const normalizedEmail = normalizeEmail(emailToVerify)\n\n    // query the submitted email\n    const response = await graphqlFetch(getUserByEmailQuery, { email: normalizedEmail })\n\n    const emailExists = response.data.viewer.allUsers.edges.length !== 0\n    const { emailVerified } = emailExists ? response.data.viewer.allUsers.edges[0].node : false\n\n    if (emailExists && emailVerified) {\n      return res.status(400).send('Email is taken, please choose another.')\n    }\n\n    // if user has a verifyEmail node existing, delete it before creating a new one\n    if (emailExists && response.data.viewer.allUsers.edges[0].node.verifyEmail) {\n      const { id } = response.data.viewer.allUsers.edges[0].node.verifyEmail\n      await graphqlFetch(deleteVerifyEmailMutation, { id })\n    }\n\n    // generate token and expiry\n    const token = await generateUniqueToken()\n    const tokenExpiry = Date.now() + 86400000 // time now in milliseconds, UTC plus 1 day\n\n    // send the data along the \"logic\" flow in the expected format to update the store\n    return res.send({\n      input: {\n        emailToVerify: normalizedEmail,\n        token,\n        tokenExpiry,\n        userId,\n      },\n    })\n  } catch (err) {\n    console.log(err)\n    return res.status(400).send(err)\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// src/logic/createVerifyEmail/pre/generateToken.js","/**\n * Created by alexandermann on 2017-04-22.\n */\nimport { Router } from 'express'\n\nimport isResendingInvite from './pre/isResendingInvite';\n\nconst routes = Router()\n\nroutes.post('/pre/isResendingInvite', isResendingInvite)\n\nexport default routes\n\n\n\n// WEBPACK FOOTER //\n// src/logic/updateInvites/index.js","/**\n * Created by alexandermann on 2017-04-12.\n */\nimport { sendInviteEmail } from 'mailer'\nimport getInviteById from '../../../graphql/queries/getInviteByIdQuery'\nimport graphqlFetch from '../../../graphql/graphqlFetch'\nimport { generateInviteEmailUrl } from '../../../helpers/generateInviteEmailUrl'\n\nexport default async (req, res) => {\n  if (req.body.input.requestVars && req.body.input.requestVars.resendInvite) {\n    try {\n      const { id } = req.body.input\n\n      // fetch the invite to get the data from the db\n      const response = await graphqlFetch(getInviteById, { inviteId: id })\n      const { email, token, isAccepted, firstName } = response.data.getInvites\n\n      if (isAccepted) {\n        return res.status(400).send(new Error('Invite is already accepted, cannot resend'))\n      }\n\n      // send the email\n      await sendInviteEmail({\n        firstName,\n        recipientEmail: email,\n        emailVerifiedToken: token,\n        actionUrl: generateInviteEmailUrl(id, token),\n      })\n\n      res.send({ input: { ...req.body.input, requestVars: null } }) // TODO: remove request vars here, refactor into own func.\n    } catch (err) {\n      console.log(err)\n      return res.status(400).send(err)\n    }\n  } else {\n    res.send({ input: { ...req.body.input, requestVars: null } }) // TODO: remove request vars here, refactor into own func.\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// src/logic/updateInvites/pre/isResendingInvite.js","/**\n * Created by alexandermann on 2017-04-22.\n */\nimport { Router } from 'express'\n\nimport updatePasswordReset from './pre/updatePasswordReset'\n\nconst routes = Router()\n\nroutes.post('/pre/updatePasswordReset', updatePasswordReset)\n\nexport default routes\n\n\n\n// WEBPACK FOOTER //\n// src/logic/updatePasswordReset/index.js","/**\n * Created by alexandermann on 2017-03-03.\n */\n\nimport client from '../../../graphql/lokkaClient'\n\nexport default async function(req, res) {\n  // check the token matches the one currently stored, if not return error\n  const passwordResetQuery = `\n    query passwordReset($id: ID!) {\n      getPasswordReset(id: $id) {\n        resetToken\n        user {\n          id\n        }\n      }\n    }\n  `\n\n  const passwordResetMutation = `\n    ($userId: ID!, $newPassword: Secret!){\n      updateUser(input:{id:$userId, password: $newPassword}){\n        clientMutationId\n      }\n    }\n  `\n\n  try {\n    // pull off relevant data from the submission\n    const { id, resetToken, newPassword } = req.body.input\n\n    // query the server to check submission with data store\n    const passwordResetQueryResponse = await client.query(passwordResetQuery, { id })\n\n    // check that a response exists\n    if (!passwordResetQueryResponse.getPasswordReset) {\n      return res\n        .status(400)\n        .send(new Error('An error occurred while processing this request. Please try again.'))\n    }\n\n    // pull relevant data from the query\n    const {\n      resetToken: dbToken,\n      user: { id: userId },\n    } = passwordResetQueryResponse.getPasswordReset\n\n    // check if the token in the db matches the token provided\n    if (dbToken !== resetToken) {\n      return res\n        .status(400)\n        .send(new Error('An error occurred while processing this request. Please try again.'))\n    }\n\n    // save the password provided in the input\n    await client.mutate(passwordResetMutation, { userId, newPassword })\n\n    return res.send({ ...req.body })\n  } catch (err) {\n    console.log(err)\n    return res.sendStatus(400)\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// src/logic/updatePasswordReset/pre/updatePasswordReset.js","/**\n * Created by alexandermann on 2017-04-22.\n */\nimport { Router } from 'express'\n\nimport verifyEmail from './pre/verifyEmail'\n\nconst routes = Router()\n\nroutes.post('/pre/verifyEmail', verifyEmail)\n\nexport default routes\n\n\n\n// WEBPACK FOOTER //\n// src/logic/updateUser/index.js","/**\n * Created by alexandermann on 2017-03-27.\n */\nimport graphqlFetch from '../../../graphql/graphqlFetch'\nimport deleteVerifyEmailMutation from '../../../graphql/mutations/deleteVerifyEmailMutation'\n\nexport default async (req, res) => {\n  // check the token matches the one currently stored, if not return error\n  const checkEmailVerifiedTokenQuery = `\n    query checkEmailVerifiedToken($userId: ID!) {\n      getUser(id: $userId) {\n        id\n        verifyEmail {\n          id\n          emailToVerify\n          token\n          tokenExpiry\n        }\n      }\n    }\n  `\n\n  const setEmailVerifiedMutation = `\n    mutation setEmailVerified($userId: ID!){\n      updateUser(input:{id:$userId, emailVerified: true}){\n        clientMutationId\n      }\n    }\n  `\n\n  try {\n    console.log(req.body)\n    // if requestVars don't contain a checkToken, then user is not trying to verify email\n    if (!req.body.input.requestVars || !req.body.input.requestVars.checkToken) {\n      return res.send({ ...req.body }) // pass the request body down to any other logic functions\n    }\n\n    // pull off relevant data from the submission\n    const { id, requestVars: { checkToken } } = req.body.input\n\n    // query the server to compare input token vs token in db\n    const response = await graphqlFetch(checkEmailVerifiedTokenQuery, { userId: id })\n\n    // check that a response exists\n    if (!response.data.getUser) {\n      console.log('error: getUser doesnt exist')\n      return res\n        .status(400)\n        .send(new Error('An error occurred while processing this request. Please try again.'))\n    }\n\n    // pull relevant data from the query\n    const { emailToVerify, token: storedUserToken, tokenExpiry } = response.data.getUser.verifyEmail\n\n    // convert date to milliseconds and compare to make sure token not expired\n    if (new Date(tokenExpiry).valueOf() < Date.now()) {\n      console.log('error: token is expired')\n      return res.status(400).send(new Error('Token is expired, please request a new one.'))\n    }\n\n    // check if the token in the db matches the token provided\n    if (checkToken !== storedUserToken) {\n      console.log('error: token doesnt match stored token')\n      return res\n        .status(400)\n        .send(new Error('An error occurred while processing this request. Please try again.'))\n    }\n\n    // set the email as verified, we call this mutation because we need admin rights to perform the\n    // mutation - for user permitted fields we would just append to the input object below\n    await graphqlFetch(setEmailVerifiedMutation, { userId: id })\n\n    // delete the verifyEmail field since the email has been verified\n    await graphqlFetch(deleteVerifyEmailMutation, { id: response.data.getUser.verifyEmail.id })\n\n    // only pass along the id because we do not want to save anything since changes have been made\n    return res.send({\n      input: {\n        id,\n        username: emailToVerify,\n        email: emailToVerify,\n      },\n    })\n  } catch (err) {\n    console.log(err)\n    return res.sendStatus(400).send(err)\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// src/logic/updateUser/pre/verifyEmail.js","/**\n * Created by alexandermann on 2017-04-26.\n */\nimport { Router } from 'express'\n\nimport createUser from './logic/createUser/index'\nimport updateUser from './logic/updateUser/index'\nimport createInvites from './logic/createInvites/index'\nimport updateInvites from './logic/updateInvites/index'\nimport createPasswordReset from './logic/createPasswordReset/index'\nimport updatePasswordReset from './logic/updatePasswordReset/index'\nimport createVerifyEmail from './logic/createVerifyEmail/index'\nimport addToUsersConnectionsConnection from './logic/addToUsersConnectionsConnection/index'\n\nconst routes = Router()\n\n// All microservice functions related to users type\nroutes.use('/createUser', createUser)\nroutes.use('/updateUser', updateUser)\n\n// All microservice functions related to invites type\nroutes.use('/createInvites', createInvites)\nroutes.use('/updateInvites', updateInvites)\n\n// All microservice functions related to PasswordReset type\nroutes.use('/createPasswordReset', createPasswordReset)\nroutes.use('/updatePasswordReset', updatePasswordReset)\n\n// All microservice functions related to VerifyEmail type\nroutes.use('/createVerifyEmail', createVerifyEmail)\n\n// All microservice functions related to Connection type\nroutes.use('/addToUsersConnectionsConnection', addToUsersConnectionsConnection)\n\nexport default routes\n\n\n\n// WEBPACK FOOTER //\n// src/routes.js","module.exports = require(\"assert\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"assert\"\n// module id = 39\n// module chunks = 0","module.exports = require(\"aws-serverless-express\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"aws-serverless-express\"\n// module id = 40\n// module chunks = 0","module.exports = require(\"babel-polyfill\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"babel-polyfill\"\n// module id = 41\n// module chunks = 0","module.exports = require(\"body-parser\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"body-parser\"\n// module id = 42\n// module chunks = 0","module.exports = require(\"crypto\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"crypto\"\n// module id = 43\n// module chunks = 0","module.exports = require(\"isomorphic-fetch\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"isomorphic-fetch\"\n// module id = 44\n// module chunks = 0","module.exports = require(\"lokka\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lokka\"\n// module id = 45\n// module chunks = 0","module.exports = require(\"lokka-transport-http\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lokka-transport-http\"\n// module id = 46\n// module chunks = 0","module.exports = require(\"moment\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"moment\"\n// module id = 47\n// module chunks = 0"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;AChEA;;;;;;;;;;;;;ACIA;AACA;AAAA;AACA;;;;;AALA;;;;;AAMA;AACA;AACA;AACA;;;;;AAKA;AAAA;AACA;AAAA;;;;;;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AACA;AAVA;AAAA;AACA;AADA;AAcA;AAdA;AAAA;AACA;AADA;AAeA;AACA;AAhBA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAmBA;AACA;AACA;;;;;;AC3CA;;;;;;;;;;;;ACUA;AACA;AAPA;AACA;;;;;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnBA;;;;;;;;;;;;;ACIA;AACA;;;AAAA;AACA;;;;;AACA;AANA;;;AAOA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;;;;;;;;;;;;ACVA;;;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;ACGA;AAHA;;;AAGA;AACA;AACA;;;;;;;;;;;;ACFA;AAHA;;;AAGA;AACA;AACA;;;;;;;;;ACLA;;;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;ACPA;AACA;;;AACA;AACA;;;;;AAJA;AAKA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;ACFA;AACA;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;;;AATA;;;AAGA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;;;;;;;;;;ACxCA;;;;;;;;;;;;;;;;;ACGA;AACA;;;AAAA;AACA;;;;;AALA;;;;;;AAMA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAGA;AAHA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AASA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;ACJA;AACA;;;AAAA;AACA;;;;;AALA;;;;;;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;ACJA;AACA;;;AAAA;AACA;;;AALA;;;;;;AAMA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;;;;;AANA;;;AAOA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACRA;AACA;AAAA;AACA;AALA;;;;;;AAMA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAOA;AACA;AACA;AAHA;AACA;AAPA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAaA;AACA;AACA;AAHA;AACA;AAbA;AACA;AAkBA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;;;AAAA;AACA;;;;;AACA;;;;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACVA;AACA;AAAA;AACA;;;AAAA;AACA;AAAA;AACA;;;;;AAPA;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAAA;AACA;AADA;AAcA;AAEA;AACA;AAjBA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAsBA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAHA;AADA;AACA;AAMA;AACA;AAjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;ACNA;AACA;AAAA;AACA;;;;;AALA;;;;;AAMA;AACA;;AAaA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AALA;AAAA;AAMA;AADA;AACA;AANA;AAKA;AALA;AAcA;AAdA;AAAA;AAgBA;AACA;AACA;AACA;AACA;AALA;AACA;AAhBA;AAsBA;AACA;AAvBA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAwBA;AAzBA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;;;AAAA;AACA;;;;;AACA;;;;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACVA;AACA;AAAA;AACA;;;AAAA;AACA;;;AANA;;;;;AAQA;AAiBA;AACA;AACA;AACA;;AAMA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AALA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AAMA;AACA;AACA;AACA;AAVA;AAAA;AACA;AADA;AAWA;AACA;AAZA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AAiBA;AAlBA;AAAA;AAAA;AACA;AADA;AAoBA;AACA;AACA;AACA;AACA;AAxBA;AAAA;AAAA;AAAA;AACA;AAwBA;AACA;AA1BA;AAAA;AACA;AADA;AAAA;AAgCA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AACA;AAhCA;AAAA;AAAA;AACA;AAwCA;AAzCA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;;;;AAAA;;;;;;;;;;;;;;AC/BA;AACA;AAAA;AACA;AALA;;;;;;AAMA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAQA;AARA;AAAA;AAWA;AACA;AACA;AACA;AAJA;AACA;AAXA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAiBA;AAlBA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;;;AARA;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACZA;AACA;;;;;AAJA;;;;;;AAKA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAQA;AATA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;ACFA;AACA;AAAA;AACA;AAAA;AACA;;;;;AAPA;;;;;AAQA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAYA;AACA;AAbA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlCA;AAmCA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AACA;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","sourceRoot":""}